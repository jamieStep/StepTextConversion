#!##############################################################################
#!
#! Change history -- introduction
#! ==============================
#!
#! This file is used to record details of changes.  It is created the first
#! time a module is generated, based upon historyTemplate.conf in the Resources
#! section of the JAR file.  Subsequently it may be updated automatically
#! (particularly if you are dealing with texts which come from DBL or some other
#! repository for which the converter contains special processing -- of which,
#! at the time of writing, there are none); or you can provide information which
#! the processing then uses to update it; or you can edit it manually.
#!
#! Lines from this file are then automatically copied to the Sword configuration
#! file.
#!
#! Since you may want to read the content of this file, or edit it manually,
#! you'll need to understand what the file looks like.  Individual rows are
#! of the form:
#!
#!   History yyyy-mm-dd || <versionid> || Explanatory text
#!
#! where ...
#!
#! yyyy-mm-dd is the date on which the module was generated (_not_ the date
#!   on which the organisation supplying the text may have updated -- that's
#!   often not easy to track down).
#!
#! <versionId> is the version identifier provided by the text supplier.  No
#!   particular format is assumed, except that it must not contain spaces.
#!   So if the text supplier says they have provided version 4.1.2 of the text,
#!   the versionId will be 4.1.2.  If they say they've provided version 5a, it
#!   will be 5a.
#!
#! To a first approximation (explained in more detail below), there should be one
#! row in the file every time a new version of the module is released, and rows
#! should be stored in order, most recent first.
#!
#!
#!
#!
#!
#! Types of change
#! ===============
#!
#! We distinguish in essence three different kinds of change:
#!
#! 1. A change arising from work carried out by the supplier -- ie they have
#!    altered the text or the metadata.
#!
#! 2. A change made by us which will be visible to STEP users.  This might arise
#!    because we have found a bug in the text conversion process, for instance,
#!    and need to correct some error introduced into the text as a result; or
#!    it might arise because we have had to change the Sword configuration file
#!    in a way which will be visible to users.
#!
#! 3. A change made by us which will _not_ be visible to the users.  The only
#!    obvious example of this would be where we change the comments within the
#!    Sword configuration file.  (Recall, for instance, that we use a stylised
#!    comment in the configuration file to record things like licence expiry
#!    dates.  If a licence is extended, we would need to alter that comment,
#!    but being a comment, the change will not be visible to STEP users.)
#!
#! As regards type 1 changes, note that I do not attempt to distinguish between
#! text changes and metadata changes.  This is essentially because DBL does not
#! do so: if I can't guarantee to distinguish them for this one source,
#! consistency suggests there is no point in attempting to do so at all.
#!
#! Note also that not all changes to external metadata have any impact upon a
#! module.  DBL, for instance, has large amounts of metadata which are of no
#! relevance to our modules.  However, there seems little point in putting
#! effort into determining whether a given change does or does not impact our
#! modules; easier just to assume they all do.
#!
#! Moving on to the question of what types of changes should result in a new
#! release (and hence a new line in the present file), types 1 and 2 should
#! always do so.  Type 3 I suggest should not -- we can update the configuration
#! file and create a revised module zip file, but it would probably be
#! confusing then to release it, when it will have no impact upon users (and
#! probably undesirable too -- if we have a working module, why risk an update
#! when just possibly changes made to the processing might break it?).
#!
#!
#!
#!
#!
#! Arranging for updates to the present file
#! =========================================
#!
#! The way you arrange for the present file to be updated depends a) upon the
#! type of change to be recorded; and b) whether the text has come from a
#! repository for which we have specialised processing (only DBL at present).
#!
#!
#!
#! a) Type 1 changes involving DBL texts
#! -------------------------------------
#!
#! So long as the text supplier has played ball with the DBL metadata -- ie
#! so long as they have provided an appropriate DBLMetadata/@revision parameter
#! to give the version number, and DBLMetadata/archiveStatus/comments to explain
#! what the update does, the converter will automatically detect when the
#! version number has been updated, and will generate an appropriate line in
#! the present file.
#!
#!
#!
#! b) Type 1 changes involving non-DBL texts
#! -----------------------------------------
#!
#! (This also includes DBL texts where the supplier has not played ball in the
#! terms described above.)
#!
#! Here you need to give values to the configuration parameters
#! stepTextVersionSuppliedBySourceRepositoryOrOwnerOrganisation (to give the
#! version), and stepSupplierUpdateReason (to give the reason for the update).
#!
#! You do this either in config.conf or in a file $include'd from it.
#!
#! If you have difficulty tracking down suitable values, you'll need to make
#! something up.
#!
#!
#!
#!
#! b) Type 2 changes
#! -----------------
#!
#! Type 2 changes are very likely to affect large numbers of texts -- if we find
#! a bug in the text converter, we may well want to build lots of texts.
#!
#! To cater for these, you need to add a parameter stepInternalUpdateReason to
#! the command-line used to invoke the converter.  The system will then
#! automatically add an appropriate line to the data here.
#!
#!
#!
#! c) Type 1) + Type 2) changes
#! ----------------------------
#!
#! There is nothing to prevent a single run of the converter from dealing with
#! both a type 1 and a type 2 change.  Simply supply whatever information is
#! required by each.  The result will be a single row which covers both.
#!
#!
#!
#! d) Manual changes
#! -----------------
#!
#! You can also edit this file directly to delete or alter existing rows, or to
#! introduce new ones.  It may help to know that the conversion processing will
#! itself add new rows only if it knows (either by reference to DBL metadata or
#! because you have given it appropriate stepSupplierUpdateReason and
#! stepTextVersionSuppliedBySourceRepositoryOrOwnerOrganisation values) that the
#! supplied text or metadata has changed, or because you have given it a
#! stepInternalUpdateReason parameter on the command line to indicate that you
#! are re-issuing the module for internal reasons.
#!
#!
#!
#!
#!
#! Comments
#! ========
#!
#! You can add comments to the file -- lines which start '#'.  Lines which start
#! '#!' are stripped out of the file when copying its content to the Sword
#! configuration file.  Lines just starting '#' are copied into the file.
#!
#!##############################################################################


History 2023-09-19 || DBL:6 || TextSupplierComment: 2020 text update, metadata update