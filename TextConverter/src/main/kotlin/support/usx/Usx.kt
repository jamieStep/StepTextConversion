package org.stepbible.textconverter.support.usx

import org.stepbible.textconverter.support.debug.Dbg
import org.stepbible.textconverter.support.miscellaneous.Dom
import org.stepbible.textconverter.support.miscellaneous.MiscellaneousUtils.getExtendedNodeName
import org.w3c.dom.Document
import org.w3c.dom.Node

object Usx
{
    /******************************************************************************************************************/
    /**
    * Returns details of tags which have numbered levels.
    *
    * @return Tags with numbered levels.
    */

    fun getTagsWithNumberedLevels (): Set<String>
    {
      return m_TagsWithNumberedLevels
    }


    /******************************************************************************************************************/
    /**
     * Returns an indication of whether a given node is a heading tag.
     *
     * @param node Node of interest.
     * @return True if node is a heading tag.
     */

    fun isHeadingTag (node: Node): Boolean
    {
        return m_TagsHeadings.contains(getExtendedNodeName(node))
    }


    /******************************************************************************************************************/
    /**
     * Returns an indication of whether a given node is non-canonical in its own right (not by reference to ancestors).
     *
     * @param node Node of interest.
     * @return True if node is inherently non-canonical.
     */

    fun isInherentlyNonCanonicalTag (node: Node): Boolean
    {
      var extendedNodeName = getExtendedNodeName(node)
      if (isNumberedLevelTag(node)) extendedNodeName += "1" // Force numbered level tags to have a digit on the end.
      return m_TagsNonCanonical.contains(extendedNodeName.replace("\\d+$".toRegex(), "#"))
    }


    /******************************************************************************************************************/
    /**
     * Returns an indication of whether a given node is non-canonical in its own right (not by reference to ancestors).
     *
     * @param node Node of interest.
     * @return True if node is inherently non-canonical.
     */

    fun isInherentlyNonCanonicalTagOrIsUnderNonCanonicalTag (node: Node): Boolean
    {
      var n = node
      while (true)
      {
        if (isInherentlyNonCanonicalTag(n)) return true
        n = n.parentNode
        if (n is Document) return false
      }
    }


    /******************************************************************************************************************/
    /**
    * Returns an indication of whether a node belongs to the ones which appear in introductory material.
    *
    * @param node Node of interest.
    * @return True if this is an introductory node.
    */

    fun isIntroductionNode (node: Node): Boolean
    {
      var style = Dom.getAttribute(node, "style") ?: return false
      style = "." + style.replace("\\d+".toRegex(), "") + "."
      return C_IntroductionStyles.contains(style)
    }

    private const val C_IntroductionStyles = ".ib.ie.iex.ili.im.imi.imq.imt.imte.io.iot.ip.ipi.ipq.ipr.iq.is.rem."


    /******************************************************************************************************************/
    /**
     * Returns an indication of whether a node is of a type which supports numbered levels.
     *
     * @param node Node of interest.
     * @return List of style attributes.
     */

    fun isNumberedLevelTag (node: Node): Boolean
    {
        return m_TagsWithNumberedLevels.contains(getExtendedNodeName(node))
    }





    /******************************************************************************************************************/
    /******************************************************************************************************************/
    /******************************************************************************************************************/
    /******************************************************************************************************************/
    /******************************************************************************************************************/

    /******************************************************************************************************************/
    /*                                                                                                                */
    /*                              Insert here the code generated by usxReference.xlsm.                              */
    /*                                                                                                                */
    /******************************************************************************************************************/

    private val m_TagsHeadings = setOf(
      "para:cd",
      "para:cl",
      "para:d",
      "para:mr",
      "para:ms#",
      "para:mt#",
      "para:mte",
      "para:r",
      "para:s#",
      "para:sd#",
      "para:sp",
      "para:sr",
      )


    private val m_TagsNonCanonical = setOf(
      "#comment",
      "_X_bracketStart:ili",
      "_X_bracketEnd:ili",
      "_X_bracketStart:io",
      "_X_bracketEnd:io",
      "_X_comment",
      "_X_introductionBlock:book",
      "_X_introductionBlock:chapter",
      "_X_reversificationCalloutData",
      "_X_reversificationMoveOriginalText",
      "_X_reversificationSourceVerse",
      "_X_subverseSeparator",
      "_X_verseBoundaryWithinElidedTable",
      "char:add",
      "char:bk",
      "char:fdc",
      "char:fk",
      "char:fl",
      "char:fm",
      "char:fp",
      "char:fq",
      "char:fqa",
      "char:fr",
      "char:ft",
      "char:fv",
      "char:fw",
      "char:ior",
      "char:iqt",
      "char:jmp",
      "char:k",
      "char:lik",
      "char:litl",
      "char:liv#",
      "char:ord",
      "char:pn",
      "char:png",
      "char:pro",
      "char:qac",
      "char:qs",
      "char:rb",
      "char:rq",
      "char:va",
      "char:vp",
      "char:wa",
      "char:wg",
      "char:wh",
      "char:xdc",
      "char:xk",
      "char:xnt",
      "char:xo",
      "char:xop",
      "char:xot",
      "char:xq",
      "char:xq",
      "char:xt",
      "char:xta",
      "figure",
      "note:ef",
      "note:ex",
      "note:f",
      "note:fe",
      "note:x",
      "optbreak",
      "para:b",
      "para:cd",
      "para:cl",
      "para:cp",
      "para:h",
      "para:ib",
      "para:ide",
      "para:ie",
      "para:iex",
      "para:ili#",
      "para:im",
      "para:imi",
      "para:imq",
      "para:imt#",
      "para:imt#",
      "para:io#",
      "para:iot",
      "para:ip",
      "para:ipi",
      "para:ipq",
      "para:ipr",
      "para:iq#",
      "para:is#",
      "para:lit",
      "para:litl",
      "para:mr",
      "para:ms#",
      "para:mt#",
      "para:mte",
      "para:qa",
      "para:qd",
      "para:r",
      "para:rem",
      "para:s#",
      "para:sd#",
      "para:sp",
      "para:sr",
      "para:toc#",
      "para:toca#",
      "periph",
      "ref",
      "sidebar",
      "verse",
      "verse:v",
      )


    private val m_TagsWithNumberedLevels = setOf(
      "cell:tc",
      "cell:tcc",
      "cell:tcr",
      "cell:th",
      "cell:thr",
      "char:liv",
      "para:ili",
      "para:imt",
      "para:imt",
      "para:io",
      "para:iq",
      "para:is",
      "para:li",
      "para:lim", // Not sure whether this is a typo, or whether it was in an earlier version of USX.  Doesn't appear in the 4.7.0 documentation.  I presently treat it like li.
      "para:ms",
      "para:mt",
      "para:ph",
      "para:pi",
      "para:q",
      "para:qm",
      "para:s",
      "para:sd",
      "para:toc",
      "para:toca",
      )



    /******************************************************************************************************************/
    /*                                                                                                                */
    /*                                  End of code generated by usxReference.xlsm.                                   */
    /*                                                                                                                */
    /******************************************************************************************************************/
}