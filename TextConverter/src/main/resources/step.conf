#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Common configuration
#! ====================
#!
#! Each text needs a Metadata/step.conf file, to which end, you should copy
#! this present file and then change it as necessary.
#!
#! There are an awful lot of configuration parameters which you may usefully
#! want to change (usefully in the sense that changing them may actually do
#! something), but for most texts there will be relatively few which you _need_
#! to change, and hopefully all of them are referred to here.
#!
#!
#!
#!
#!
#! A brief reminder of the mechanics behind configuration data
#! ===========================================================
#!
#! Details of how the configuration data works appears in _readMeFirst_.txt in
#! this resources section.  In particular, that explains how configuration
#! parameters can be built up out of other parameters, something which we do not
#! cover here.  In summary:
#!
#! - Configuration files may be included within other configuration files to any
#!   reasonable depth.  From a processing perspective, it is as though each
#!   $include statement had been replaced by the content of the file to which it
#!   refers, and the entire resulting text is processed in order.  You are free
#!   to structure these things as you wish -- the processing ascribes no
#!   particular meaning to the file in which a given setting is found.
#!
#! - A typical statement looks like key=val.  This associates the given value
#!   with the given key.
#!
#! - You may alternatively have key#=val.  This works in much the same way, but
#!   'forces' the setting -- see following bullet points.
#!
#! - The $include mechanism makes it possible (and indeed likely) that you will
#!   have more than one setting for a given key ...
#!
#! - If you have more than one key=val setting for a given key, the LATER setting
#!   wins.
#!
#! - If you have both a key=val setting and a key#=val setting for the same key,
#!   the #= setting wins.
#!
#! - If you have more than one #= setting, the EARLIER one wins.
#!
#!
#!
#!
#!
#! Settings from an environment variable
#! =====================================
#!
#! Some settings may be supplied in the StepTextConverterParameters variable --
#! it should be set up to contain a number of key=val or key#=val settings
#! separated by semicolons.
#!
#! These are loaded before anything else, so key=val settings take a low
#! priority -- settings on the command line, settings derived from external
#! metadata files, and settings in your own configuration data will all take
#! precedence.
#!
#!
#!
#!
#!
#! Command-line settings
#! =====================
#!
#! Some configuration information is taken from the command-line.  If a
#! parameter is set there, then that setting overrides everything else: you
#! _can_ include your own setting in the configuration information, but it will
#! be silently ignored if there is a command-line setting for it.
#!
#! Having said this, some command-line parameters are optional and here you
#! _can_ usefully supply settings here.  If an optional parameter is not
#! not supplied, the command-line processing will assign to it a default setting
#! if there is one; but you can always override these non-supplied command-line
#! settings even if a default has been supplied.
#!
#!
#!
#!
#!
#! Settings from external metadata files
#! =====================================
#!
#! When using texts from DBL, we usually have available to us their metadata.xml
#! and license.xml file and -- so long as you set
#! stepFileSelectorForOwnerOrganisation and stepFileSelectorForExternalDataFormat
#! appropriately here -- some of the data which would otherwise need to be
#! recorded manually can be picked up automatically from there.
#!
#! (It is possible we may support forms of metadata other than DBL's in future,
#! if that proves worthwhile.)
#!
#! This means that you may not need to supply values for all of the settings
#! below if you are handling a DBL-sourced text.
#!
#!
#!
#!
#!
#! What to do
#! ==========
#!
#! Hopefully, this file names all of the parameters which you definitely need to
#! know about and may need to provide values for.
#!
#! If a parameter value here starts with @Mandatory, then a value definitely
#! needs to be supplied for it.  It does not necessarily follow that you have to
#! supply a value yourself, however -- if you are dealing with a DBL text, it
#! may be that the value can be obtained from there.
#!
#! If the setting is @MandatoryMayBeEmpty, then it is fine to give it an empty
#! value, which you can do either by giving a setting of the form key=   or
#! of the form key={empty} -- the two are equivalent, but the latter possibly
#! makes things clearer.
#!
#! If the setting is @Mandatory, then you must supply a non-empty value.
#!
#! All other settings below assign what I believe to be reasonable defaults
#! (some of them empty), but you are free to override them as necessary.
#!
#! My recommendation is that you apply all of the changes to your own copy of
#! file directly, since I believe that will be clearer.  However, there may be
#! circumstances (particularly if you have a number of related texts which have
#! a lot of configuration information in common) where it is desirable to put
#! the common settings into a separate file which you can share, and you are, of
#! course free to do that -- all you need do is make sure you have taken into
#! account the precedence rules discussed earlier.
#!
#!
#!
#!
#!
#! Less common settings
#! ====================
#!
#! This file contains the settings I think you are most commonly going to need
#! to handle.  There are a lot of other settings, which you are less likely to
#! be concerned with, but which nonetheless _may_ need to be changed
#! sometimes.  These are all stored in separate files in the Resources section
#! of the converter JAR file, details of which appear below.
#!
#! If it looks as though a setting will need to be changed for _all_ texts, then
#! you really need to modify the file in the Resources section.  If you just
#! need to override a setting for a few texts, then you can use a #= assignment
#! here to do so.
#!
#! Each of the various files contains extensive comments about the data it holds
#! and how to change it.  The files are as follows:
#!
#! - basicDefinitions.conf contains standard rubric containing things like
#!   standard wording for thanks and acknowledgments and for open access
#!   licensing.
#!
#! - commonRoot.conf: Contains a standard collection of $includes, records where
#!   external data such as reversification data can be found, etc.
#!
#! - dummyMandatoryValuesForUseWhereSwordConfigHasBeenSupplied.conf: There
#!   are a number of parameters in this file flagged as being mandatory.
#!   This reflects the situation where we are starting from OSIS and generating
#!   our own Sword config file.  However, for those texts where the input is
#!   OSIS we will normally already have been given a Sword config file, and
#!   therefore don't need these mandatory parameters.  This file provides
#!   dummy values for them, to avoid error messages.
#!
#! - externalDataPaths.conf: Contains more things such as URIs for external
#!   data, or which we commonly want to include on the copyright page.
#!
#! - osis2modVersification.txt: This isn't a configuration file as such: it
#!   contains details of the various Crosswire osis2mod versification schemes.
#!
#! - overrides.conf: Empty at present; I intended it to be used if we wanted to
#!   override settings for a while for debug purposes.
#!
#! - PerOwnerOrganisation/... Where we get a number of texts from the same
#!   organisation, it may be convenient to have a single source of information
#!   about that organisation.  This folder contains one file for each such
#!   organisation.
#!
#! - PerTextRepositoryOrganisation/... Where we get a number of texts from the
#!   same repository (eg DBL), it may be convenient to have a single source of
#!   information about that repository.  This folder contains one file for each
#!   such organisation.
#!
#! - ReferenceFormats/... Contains details of common reference formats (at the
#!   time of writing, just USX).  If you need to be able to parse a format or
#!   write it out, you will need to set up your own equivalent.
#!
#! - standardBookNames.conf: A list of all the standard book names with which
#!   the system can cope.  You shouldn't need to change this.
#!
#! - step.conf: This present file (if you're looking inside the converter JAR
#!   file), or the master copy from which your main configuration file was
#!   derived (if you're looking at your own copy of the file).
#!
#! - strongsCorrections.txt: Not a configuration file.  Contains a whole series
#!   mappings from Strong's numbers as they may appear in texts to the numbers
#!   as they should be.
#!
#! - swordTemplateConfigFile.conf: The outline of a Sword configuration file.
#!
#! - TextTranslations/...: A collection of files containing standard footnote
#!   text in a variety of languages.  If you need to have text for a new
#!   language (and intend to have translations for it), you can either add
#!   to the collection of files here, or you can set up and include your own
#!   definitions as part of your own configuration data.  The former is to be
#!   preferred if you anticipate needing to reuse the translations with a number
#!   of different texts.
#!
#! - usxToOsisTagConversionsEtc.conf: This contains mappings from USX to the
#!   'equivalent' OSIS.  Not all mappings are handled here -- some are too
#!   complicated to represent as a simple mapping -- but most are.  In general,
#!   you should assume that what is here it correct; if that proves not to be
#!   the case, then you should update things here.  However, if you need to
#!   tweak the mappings for a single text, you are free to supply overrides as
#!   part of the configuration data specific to that particular text.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                      Interface to external metadata                       !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Keep this at the top of this file.
#!
#! Some data sources supply metadata in a defined format.  Where many texts
#! come from the same source, it may make sense to have code within the
#! converter to extract configuration information automatically from those
#! files, rather than have to transcribe it.texts
#!
#! At present, the only built-in support we have is for DBL metadata.xml and
#! license.xml files.  If these are available for a given text, you can use
#! the parameters below to record the fact.
#!
#! It may also be useful to include standard data about the text owner
#! organisation -- again something you do here.  At present, the only
#! source of special information we have is for Biblica.
#!
#! Use sentence case for all values -- Dbl and Biblica, and make sure you
#! assign the values using '#=', not just '='.'
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepFileSelectorForOwnerOrganisation#=     #! eg Biblica, which is the only special case we support at present.  Leave empty if not wanted.
stepFileSelectorForExternalDataFormat#=    #! eg Dbl.  Leave empty if not wanted.





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                           Your own #= settings                            !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! This is one possible place to store your own settings -- either directly,
#! by recording them here or indirectly in files $include'd from step.config.
#!
#! This area is intended mainly for #= settings -- ie ones which you wish to
#! force regardless of what the converter may attempt to do internally.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#! INSERT ANY DEFINITIONS HERE.  DON'T FORGET YOU _PROBABLY_ WANT TO USE '#=''.





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Definitions for use if you have VerseLine format data as input.
#!
#! - stepVlCommentMarker: Defines the comment marker.  Blank lines and lines
#!   starting with this marker are ignored.  Leave undefined if there are no
#!   comment lines.
#!
#! - stepVlLineFormat -- eg ?<bookAbbrev>.*?)\.(?<chapter>\d+)\.(?<verse>\d+)\t(?<text>.*)
#!   A regular expression which makes it possible to extract the various parts
#!   of each line.  You must define the named fields listed above.
#!
#! - If the VL does not use USX book abbreviations in its verse references, you
#!   will also need the #VernacularBookDetails entries discussed elsewhere, which
#!   relate USX abbreviations to the long and / or short and / or abbreviated
#!   abbreviations used in the VL.  For example:
#!
#!      #VernacularBookDetails GEN: Abbr: Gn.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!stepVlCommentMarker=#
#!stepVlLineFormat=(?<bookAbbrev>.*?)\.(?<chapter>\d+)\.(?<verse>\d+)\t(?<text>.*)





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!! Standard includes -- don't alter this or move it relative to other things !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

$include $common/step.conf        #! Don't change either of these two rows, and don't add anything between them.
$include $common/commonRoot.conf  #! Implementation note: These may look as though you'll end up with recursive includes etc, but there's special processing to ensure you don't.




#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                   The organisation which owns the text                    !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! These settings should be available automatically on DBL texts, so long as you
#! have set stepFileSelectorForOwnerOrganisation and
#! stepFileSelectorForExternalDataFormat (at the top of this file)
#! appropriately.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepTextOwnerOrganisationAbbreviatedName=@(stepTextOwnerOrganisationFullName)   #! We take the full name if nothing else is available.
stepTextOwnerOrganisationFullName=@MandatoryOrEmpty
stepTextOwnerOrganisationWebsiteLinkOrDescription=@MandatoryMayBeEmpty          #! May be plain text or an HTML 'a' tag.





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                   The organisation which hosts the text                   !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Sometimes -- as with DBL -- the text is actually supplied by an organisation
#! other than the one which owns it.  This gives details.
#!
#! These settings should be available automatically on DBL texts, so long as you
#! have set stepFileSelectorForOwnerOrganisation and
#! stepFileSelectorForExternalDataFormat (at the top of this file)
#! appropriately.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepTextRepositoryOrganisationFullName=@MandatoryMayBeEmpty
stepTextRepositoryOrganisationAbbreviatedName=@(stepTextRepositoryOrganisationFullName)
stepTextRepositoryOrganisationWebsiteLinkOrDescription=@MandatoryMayBeEmpty  #! May be plain text or an HTML 'a' tag.




#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                              About the text                               !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Technical details
#! =================
#!
#! Define these only if you're sure you need to do so.  In particular, all of
#! them can be picked up automatically from DBL metadata files, so if you're
#! using DBL texts, you need define things here only if you specifically want to
#! override what DBL gives.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepTextDirection=LTR        #! LTR or RTL.
stepSuppliedScriptCode=      #! Where required (ie where the ISO language code needs further requirement).
stepSuppliedCountryCode=     #! Where required (ie where the ISO language code needs further requirement).



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! If you are using the Crosswire version of osis2mod, this must be one of the
#! versification schemes which that supports.  You can leave the setting
#! unchanged where you are using our bespoke version, because the processing
#! will override it.
#!
#! Crosswire is rather picky about the case of the value, but there's no need to
#! worry here -- the processing will sort it out.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#! stepVersificationScheme=NRSV



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Text identification
#! ===================
#!
#! This is irrelevant to the conversion processing: I just have a feeling it may
#! be useful for each text to have a unique id for our own administrative
#! purposes.
#!
#! In some cases, the text owner or repository may supply something of use --
#! something which is at least unique within their own environment, so that they
#! can distinguish this particular text from anything else they handle.  This is
#! a reasonable starting point.  (If there is nothing suitable, you'll just have
#! to make something up.)
#!
#! In all cases, the id on its own may not be globally unique.  For example, if
#! a text supplier gives a text an id of 10, it is perfectly possible that some
#! other supplier may also have a text with an id of 10.
#!
#! To try to get around this potential ambiguity, you need also to supply a
#! value for stepDisambiguatorForId -- any string which, taken in combination
#! with the id, is likely to give something unique.
#!
#! For DBL texts, things are set up to set this automatically to DBL.  For ids
#! which you make up, I recommend 'Step'.  For other sources, you need to come
#! up with something which reflects the source of the text.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepDisambiguatorForId=@MandatoryMayBeEmpty
stepTextIdSuppliedBySourceRepositoryOrOwnerOrganisation=@Mandatory



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Version
#! =======
#!
#! Something which uniquely identified a particular version of a given text.
#! Usually you can probably rely upon the text supplier giving you something
#! suitable (or perhaps the repository from which the text was obtained -- DBL,
#! for instance, requires the metadata for all texts to contain a version
#! number).
#!
#! If you aren't given anything suitable, you'll just have to make something up.
#!
#! The format doesn't matter (ie you can go with whatever you're given),
#! except that it should not contain spaces.
#!
#! Note that STEP also maintains its own version number, independent of this --
#! something of the form eg 1.2, where 1 is the major version number and 2 is
#! minor version number.  I'd prefer not to have this second version number,
#! but Crosswire mandate the format of version numbers, and there's no guarantee
#! that version numbers supplied by third parties will fit with this.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepTextVersionSuppliedBySourceRepositoryOrOwnerOrganisation=@Mandatory
#! stepTextModifiedDate=  dd-MMM-yyyy format.  This is used in anger only in the OSIS header, and I don't think it is particularly meaningful.  Defaults to today's date if not supplied.



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Blurb for copyright page
#! ========================
#!
#! Override the vernacular Bible name if you happen to know the vernacular form.
#!
#! stepAboutAsSupplied feeds into stepAbout, which is defined in commonRoot.conf.
#!
#! stepDistributionLicence is supposed to be one of:
#!
#!   Public Domain
#!   Copyrighted
#!   Copyrighted; Permission to distribute granted to CrossWire[1]
#!   Copyrighted; Permission granted to distribute non-commercially in SWORD format
#!   Copyrighted; Free non-commercial distribution
#!   Copyrighted; Freely distributable
#!   GFDL
#!   GPL
#!   Creative Commons: BY-NC-ND 4.0
#!   Creative Commons: BY-NC-SA 4.0
#!   Creative Commons: BY-NC 4.0
#!   Creative Commons: BY-ND 4.0
#!   Creative Commons: BY-SA 4.0
#!   Creative Commons: BY 4.0
#!   Creative Commons: CC0
#!
#!
#! On DBL texts, most of the values will be picked up automatically from
#! metadata.xml.  You will need to supply stepDistributionLicence, though -- and
#! optionally stepDistributionNotes.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepBibleNameEnglish=@Mandatory
stepBibleNameVernacular=@Mandatory
stepAbbreviationEnglish=@Mandatory
stepAbbreviationVernacular=@Mandatory
stepShortCopyright=@Mandatory         #! Brief copyright details.
stepShortPromo={empty}                #! Short promotional material (may include an HTML <a href> link).  Assumed blank if not supplied.
stepAboutAsSupplied=@Mandatory        #! A brief description.  Along with some standard stuff of our own, turns into Sword's 'About' parameter (see stepAbout below).

stepDistributionLicence=@Mandatory    #! This needs to be drawn from a prescribed list -- see head of section comments for more information.
stepDistributionNotes={empty}         #! Any additional information about the licensing conditions.





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                                   Debug                                   !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Controls for debug output.  These are also available via the equivalent
#! command-line parameters dbgAddDebugAttributesToNodes and
#! dbgDisplayReversificationRows.
#!
#! dbgDisplayReversificationRows can assume the values ...to
#!
#!   No / Screen / File / Anything containing both Screen and File
#!     (Not case-sensitive)
#!
#! If you select anything containing Screen, you can also optionally include
#! Deferred or Immediate.  'Deferred' stores the output and displays it at the
#! end of the run.  'Immediate' outputs it as it is generated, and is the
#! default.
#!
#! There are equivalent command-line settings for these parameters.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepDbgAddDebugAttributesToNodes=No   #! Yes or No (not case-sensitive).
stepDbgDisplayReversificationRows=No  #! See above for permitted settings.





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                               Preprocessing                               !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Sometimes we are called upon to process texts which contain systematic
#! issues.  One way of addressing these is to make manual changes to the raw USX
#! before embarking upon the conversion processing.  However, this may be
#! tedious, and such changes may be lost if the text is up-issued at some point.
#!
#! I support three alternatives to this, making it possible to apply changes to
#! the text before the converter runs.  These are described in detail in the
#! head-of-class documentation for [PreprocessorHandler] and in the user guide.
#!
#! To tell the converter that it needs to employ them you set one or other of
#! the parameters below.  (You _can_ use more than one of these, so long as you
#! can live with the confusion which may possibly result from doing so.)
#!
#! You use stepRunnablePreprocessorFilePath to run some external preprocessor
#! from within a DOS command-window (Windows) or a shell (Linux).
#!
#! This can be written in any language you choose. If you give a path name
#! ending in .jar, the processing will assume that it has to be run as
#! 'java -jar xxx.jar'.  If it ends in .py, 'python xxx.py' is assumed.  If it
#! ends in .js, 'node.js xxx.js' is assumed.  Anything else is assumed to be
#! runnable simply by referring to the path.  If this is not the case, you can
#! supply stepRunnablePreprocessorCommandPrefix to indicate what should be used
#! to run your program.  (For example, if you wished to run a Perl program, for
#! which I do not provide built-in processing, you'd give
#! stepRunnablePreprocessorCommandPrefix as 'perl'.)
#!
#! In all cases, the program receives command line arguments telling it which
#! files to process and where to store the results.  More details are given in
#! the documentation for PreprocessorHandler.
#!
#! stepRunnablePreprocessorFilePath is run as a separate program, and works
#! with files.  As an alternative, you can set stepCallablePreprocessorFilePath
#! to point to a JAR file which conforms to a particular API, and this is then
#! called directly from within the converter, passing to it a DOM.  Again, see
#! PreprocessorHandler.
#!
#! stepXsltStylesheet* lets you specify an XSLT stylesheet which is applied to
#! a document.  If you wish to have a stylesheet specific to a given Bible book,
#! define eg stepXsltStylesheet_Gen.  Otherwise stepXsltStylesheet (with no
#! bookname-suffix) is used for all books.  Note that if there is a stylesheet
#! specific to a given book, only that stylesheet is applied to it -- for that
#! particular book, the plain vanilla stepXsltStylesheet is not applied.
#!
#! The value assigned to these parameters can be either a complete XSLT
#! stylesheet or a collection of xsl:template chunks.  In the latter case, a
#! stylesheet is fabricated which contains all of the namespace settings from
#! the document being processed, along with code to copy across any parts of the
#! document not altered by the various templates.  Thus something like:
#!
#!   <xsl:template match="para[matches(@style, '^mt(1|2)')]"/>
#!
#!   <xsl:template match="verse">
#!     <newVerse>
#!       ...
#!     </newVerse>
#!   </xsl:template>
#!
#! is perfectly acceptable.
#!
#! Recall, incidentally, that the definition of a configuration parameter may
#! extend over several lines, but you need to mark the end of any continued
#! line with a backslash.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepCallablePreprocessorFilePath=      #! Setting is somePathOrOther/fileName and follows the rules for paths in $include directives.
stepRunnablePreprocessorFilePath=      #! Setting is somePathOrOther/fileName and follows the rules for paths in $include directives.
stepRunnablePreprocessorCommandPrefix=

stepXsltStylesheet=
stepXsltStylesheet_Gen=                #! Etc.



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Simple USX preprocessing
#! ========================
#!
#! For simple tag changes, there is no need to go to the trouble of creating
#! fully fledged preprocessors.  Where you simply want to change tag names
#! or style attributes in USX, you can use stepSimplePreprocessTagModifications.
#!
#! Specify a non-empty value for stepSimplePreprocessTagModifications if you want
#! to use this functionality.  The value you specify needs to be of the form:
#!
#!   mapping | mapping | ...
#!
#! with as many mappings as necessary, '|'-separated (spaces are ignored).
#!
#! Mappings are of the form eg:
#!
#!   para:li4 -> para:li1     OR     note -> specialNote
#!
#! The former changes style='li4' on para tags to style='li1'; the latter
#! changes all note tags to be specialNote.  (You can change both tag name
#! and style if you wish.)
#!
#! you can also have things like   tagName:attributeName -> tagName  which will
#! remove the given attribute from all tags named 'tagName'.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepSimplePreprocessTagModifications=





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                               Processing                                  !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepCorrectStrongs=yes #! If true, the processing attempts to reduce Strong's references to canonical form and reports any errors.
                       #! If false, no changes are applied, and no errors are reported.





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                        Changes for derived work                           !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! With open access texts, we may be required to detail the changes we have
#! made, and may also have to include some standard rubric stipulated by the
#! text supplier.
#!
#! To cater for this, set stepWordingForDerivedWorkStipulatedByTextSupplier to
#! the wording mandated by the supplier, and stepChangesMadeByUsInDerivedWork
#! to the details of the changes we have made.  You may supply both, either, or
#! neither of these.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepStandardWordingForDerivedWorkWeHaveChangedVersification=The STEP project has altered the verse structure in some places to make it fit with a standard versification scheme.
stepWordingForDerivedWorkStipulatedByTextSupplier=
stepChangesMadeByUsInDerivedWork=





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                             Reversification                               !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! stepReversificationType will often be set on the command line (as
#! reversificationType).  Effect is as follows:
#!
#! - If empty (ie not supplied) the processing makes up its own mind as to
#!   whether reversification is needed.  It will be if the text contains verses
#!   which are not in whichever versification scheme has been selected;
#!   otherwise it will not.  If needed it will default to type 'RunTime'.
#!
#! - None: No reversification to be applied.
#!
#! - RunTime: The generated module is pretty much identical to the raw text.
#!   Any reversification tweaks which are needed to make the text work with
#!   STEP's added value are applied on the fly at run time when the user invokes
#!   these added value features.
#!
#! - ConversionTime: The module is restructured within the converter so as to
#!   align it with NRSV(A).  This option is probably limited to a few Public
#!   Domain texts, because it may entail significant restructuring of the text,
#!   something which is outlawed by most licence agreements.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!stepReversificationType=                   #! None / RunTime / ConversionTime or leave empty.
stepReversificationFootnoteLevel=Basic     #! Basic / Academic or leave empty.





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                            Processing control                             !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! We deal here with the general flow of control -- for example, whether
#! optional parts of the processing chain are applied or not.
#!
#! Some of these things are controlled by the command line.  FYI, command-line
#! parameters are copied into the configuration data, with 'step' prefixed to
#! their names.  So, for example, the command line parameter runType turns into
#! a configuration parameter stepRunType.
#!
#! Apologies for the amount of verbiage below, but some of the parameters take
#! rather a lot of describing.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! In the normal course of events, osis2mod is run automatically under control
#! of the converter.  However, sometimes (possibly when the OSIS file is
#! particularly large?) it seems to hang.  In these cases, you can arrange for
#! the converter to pause at the point where it would normally run osis2mod
#! to allow you to run it manually.
#!
#! This parameter applies regardless of whether you are intending to run the
#! Crosswire version of osis2mod or our own bespoke version.
#!
#! It can also be set via the command line.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepManualOsis2Mod=No  #! Yes or No (not case-sensitive).



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Final validation normally checks verse ordering and reports as errors places
#! where things are out of order.  However, some texts (at the time of writing,
#! notably deu_HFA) have things which are deliberately out of order in the first
#! place.  The setting below tells the processing whether to report errors or
#! warnings when things are out of order (assuming that validation is being
#! applied -- this is controlled not by a configuration parameter, but by a
#! compile-time flag).
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepValidationReportOutOfOrderAsError=Yes   #! Yes or No (not case-sensitive).



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Typically this will be overridden in any case where we are taking texts from
#! an owning organisation such as Biblica which has its own configuration file,
#! because we will work out from that whether the text needs to be encrypted.
#!
#! Provided I have the processing correct, it will err on the side of caution.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepEncryptionRequired=@Mandatory  #! Yes or No (not case-sensitive).



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Details of any respects in which STEP has added 'significant' added value to
#! the text.  All yes/no values.  Note that if in future there are more aspects
#! in which value can be added, they will need to be listed here.
#!
#! I have a feeling I should be able to determine this automatically, so these
#! settings are likely to be ignored in future.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepAddedValueStrongs=No     #! Yes or No (not case-sensitive).
stepAddedValueMorphology=No  #! Yes or No (not case-sensitive).




#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                                Copy as-is                                 !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! It may be useful to include lines which are simply copied to the end of the
#! Sword config file.  You can therefore give here a number of lines of the
#! form
#!
#!   copyAsIs=...
#!
#! for example
#!
#!   copyAsIs=Obsoletes=abcXYZ
#!
#!
#! This is one situation where a later definition does _not_ replace an earlier
#! one -- you can have as many of these lines as you want, and all of them are
#! retained.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#! copyAsIs=...




#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!                                                                           !!
#!!                           Additional settings                             !!
#!!                                                                           !!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! This may be a convenient place to add further settings of your own.
#! Regardless of whether you use myKey=#val or myKey=val, the effect here will
#! be the same -- the setting will take effect only if there has been no
#! previous '#=' setting for myKey.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#! INSERT ANY DEFINITIONS HERE.
