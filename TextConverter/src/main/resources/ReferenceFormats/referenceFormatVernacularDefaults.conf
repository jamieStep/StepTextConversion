#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Default definitions for vernacular languages -- Overview
#! ========================================================
#!
#! This file contains default settings which describe how to parse and output
#! vernacular scripture references.  If you decide you need to be able to do
#! this (and you may decide, in fact, that you do _not_ -- more discussion below),
#! this file defines defaults which you may find useful.  If it mostly does what
#! you want, then you can simply override those definitions which are wrong.  If
#! it's a long way adrift, then you might need to override everything.  But at
#! least if you do need to generate your own definitions, this should make clear
#! what definitions you need, and how to set them up.
#!
#!
#!
#!
#!
#! Possible uses of vernacular files
#! =================================
#!
#! Whether you need to create a vernacular file depends upon what processing you
#! are applying to the text, and what you wish to achieve.  To this end, it will
#! help to know the places where the processing may need to use vernacular
#! definitions -- of which there are two.  I will describe the two as though they
#! are always applied, although this is not necessarily the case -- a fact I will
#! return to shortly.
#!
#!
#!
#! Whether you are applying reversification or not
#! -----------------------------------------------
#!
#! The processing reads the content of USX 'ref' tags (used to represent cross-
#! references).  A ref tag contains an attribute which gives the target
#! reference in USX form (used to create an actual link to the target), and
#! the _contents_ of the tag give the reference in vernacular form (which
#! appears on-screen as clickable text).  The processing attempts to confirm that
#! the vernacular references are syntactically correct, and that they point to the
#! same place as the USX form.
#!
#!
#!
#! If you ARE applying reversification
#! ------------------------------------
#!
#! Reversification may cause a verse to change its number -- Gen 1:1 may turn
#! into Gen 1:2 or whatever.  It might be felt that this would again have an
#! impact upon cross-references, and indeed it does: with the above example, a
#! cross-reference which previously pointed to Gen 1:1 would now have to point
#! to Gen 1:2, and I do apply this change to the USX representation of the
#! target which appears in the attribute list of the ref tag.  However, I have
#! been asked _not_ to alter the corresponding vernacular string, so from
#! this point of view, I do not need to know about vernacular reference
#! formats.
#!
#! Where vernacular formats _may_ be an issue, however, is in reversification
#! footnotes.  I do my best to make it possible for these footnotes to come out
#! in vernacular form -- I use vernacular forms of the text where available; and
#! many of the footnotes include scripture references, which I also convert to
#! vernacular form where I have the necessary information.  If I lack this
#! information, things will still _work_ (ie the module will be usable), but any
#! scripture references in the footnotes will be rendered in using USX formats
#! (ie in English).
#!
#!
#!
#! Configuring the use of vernacular data
#! --------------------------------------
#!
#! By default, vernacular data is used for neither of these activities.  Cross-
#! references are not validated, and any references which appear in footnotes
#! will be written in the USX format, using English book names.
#!
#! This does mean that you may possibly have some invalid cross-references if
#! the translators have got anything wrong; and of course footnotes may not be
#! entirely meaningful to your target audience.
#!
#! To turn these activities on, you must define stepUseVernacularFormats=Yes
#! somewhere -- discussed below where I run over the various individual
#! definitions and how to use them.  If you do that, then you will definitely
#! need to have your own vernacular definitions: if you do not, the ones where
#! will be used, but the chances of them being correct are probably negligible.
#!
#! Bear in mind, incidentally, that you may very well need a file like this per
#! _text_, not per _language_.  This is because of the general lack of
#! consistency as regards how scripture references are formatted.  Even
#! limiting ourselves to just English texts, for instance, some translators may
#! use Jn.3:16, others Jn 3.16, etc, etc.  There just _is_ no standard English
#! format; and that presumably holds true for other languages too.
#!
#!
#!
#!
#!
#! Terminology
#! ===========
#!
#! For the sake of brevity, I refer to the various elements which can make up a
#! reference as b, c, v and s for book, chapter, verse and subverse
#! respectively.
#!
#! I refer to a reference as 'unconditionally valid' (abbreviated to uvalid) if
#! all of its leading elements are known, and there are no holes in it.  b, bc,
#! bcv and bcvs are all uvalid.  cv is not (it lacks the leading b); and bcs is
#! not (it has a hole in it.
#!
#! I refer to a reference as 'conditionally valid' (cvalid) if leading (and perhaps
#! trailing) elements are unknown, but there are no holes.  cvs, cv and vs are
#! all cvalid.  bs, bv, and cs are not, because there are holes.
#!
#! Anything else is invalid.
#!
#!
#!
#!
#!
#! Reading
#! =======
#!
#! In general when I am reading and parsing text, I expect to be able to create
#! uvalid references.  There are two ways in which I can achieve this.  The
#! more obvious one is if I find a textual representation of a uvalid reference
#! within the text -- bcvs, say (Jn 3:16).  The slightly less one arises if I
#! merely find a cvalid reference (3:16, say).  Many of the routines which read
#! references keep track of the present context, and supply that context to the
#! reading methods; and so long as the context contains enough information to
#! fill in any missing leading elements, that's fine.  Thus if the context
#! tells us that we are working with the book of John, then the cvalid reference
#! 3:16 can be converted to a uvalid reference by adding in the book from the
#! context.
#!
#! Thus far, we have been dealing really with individual references, but of
#! course we don't always have individual references in isolation -- we may
#! have them in the context of a reference range or a reference collection;
#! or we may have things we believe to be references within some arbitrary
#! text string -- 'See also 3:16 and 4:12'.
#!
#! In these cases, the above considerations are really of importance mainly
#! as regards the _first_ reference encountered.  That is taken as providing
#! context to the next, and since the rules above guarantee that we will
#! accept the first reference only if it can be made uvalid, we'll necessarily
#! have a uvalid reference to act as context for the next reference -- and so
#! on, with each reference acting as context for the next.
#!
#! (This may be stretching things somewhat when handling arbitrary text
#! strings, but it will do.  Of course, sometimes this may be overzealous:
#! we may have a definition which says, for instance, that a verse is
#! given by a number, but it does not necessarily that if an arbitrary
#! string contains a number, we should take it as a verse: it might just
#! be intended as a number.  I do have some rules for making such a situation
#! slightly less likely, which are discussed later.)
#!
#! One final point -- a reference which obeys all of the above rules is a valid
#! reference regardless of how ridiculous its contents are.  Jn 123:987 is a
#! perfectly valid reference as far as the processing based upon this file is
#! concerned.
#!
#!
#!
#!
#!
#! Writing
#! =======
#!
#! On output, there is no absolute requirement to write out references
#! in full.  The present file gives the system the knowledge it needs to write
#! out references in part if appropriate -- how to write out bcvs, cv, etc.
#!
#! Which of these is actually used will depend upon circumstances.  You can
#! pass a format parameter to the methods which handle writing to force the
#! format (similar parameters are also used in text templates used when
#! generating footnotes etc); or you can pass context details to have the
#! processing write out a reference which omits things which can be defaulted
#! from context; or you can leave the decision to the processing.
#!
#!
#!
#!
#!
#! Data format (the right-hand sides of equals signs in the definitions below)
#! ============================================================================
#!
#! * Spaces immediately following the equals sign, or at the end of a line, are
#!   ignored.  If you need a significant space there, specify it as {space}.
#!
#! * Elsewhere where you are defining some kind of pattern, an embedded space
#!   is taken as implying that at this point one or more spaces are required.
#!
#! * In many cases you can include regular expressions (which may be
#!   particularly useful where you want to support more than one kind of
#!   separator, for instance).  Where you want a regular expression, enclose it
#!   within Ͼ...Ͽ.  (Sorry about the weird bracketing characters, but I need
#!   something which is unlikely to appear as part of genuine references.  I
#!   can't tell you how to type these characters, but you can always cut and
#!   paste them from here.)  Regular expressions are taken as-is, except that
#!   as above, an embedded space is assumed to map to one or more spaces.  By
#!   default, matching is case insensitive.  If you need to make something
#!   case sensitive, include (?-i) before it.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! If you wish the processing actually to make use of any vernacular details
#! you supply, you must redefine stepUseVernacularFormats to have the value
#! Yes.  (The definitions in this present file are actually ones for USX.
#! you will want to set stepUseVernacularFormats to Yes only if any vernacular
#! references in your text conform to the USX format, or if you are overriding
#! some or all of the USX formatting directives with ones appropriate to the
#! text you are handling.
#!
#! If you do set the value to Yes ...
#!
#! - If the text contains cross-references (char:xt) which lack the link-href
#!   parameter which gives the target in USX form, the processing will attempt
#!   to create that information by parsing the vernacular text which makes up
#!   the content of the tag.
#!
#! - The processing will attempt to ensure that where a tag has both a USX
#!   version of the target and a vernacular form, the vernacular form can be
#!   parsed, and the two are compatible.
#!
#! - If either of these activities fails, warnings are issued.  The processing
#!   will still proceed to a conclusion, and the resulting module will be
#!   usable, but these particular cross-references will not work properly.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepUseVernacularFormats=No



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! How numbers are handled
#! =======================
#!
#! We need to give Java enough information to know how to read and write
#! numbers in the locale with which we are dealing.
#!
#! Note that at the time of writing, the processing offers only those
#! writing systems which Java supports natively.
#!
#! In general, language details are derived from the language code for the
#! text, and this is already available from the configuration data.
#!
#! In some cases, though, language details may differ according to the country
#! (Brazilian Portuguese may not work the same way as Portuguese Portuguese,
#! for instance).  In these cases, you can add an extra country code using
#! V_stepReferenceLanguageCountryCode.
#!
#! And in a few cases, additional tailoring may be needed via
#! V_stepReferenceLanguageVariant.
#!
#! V_stepReferenceLanguageCountryCode and V_stepReferenceLanguageVariant should
#! be left blank if they are not relevant.
#!
#! See https://www.oracle.com/technical-resources/articles/javase/locale.html
#! for more information about all of these parameters and the values you can
#! specify for them.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

V_stepReferenceLanguageCode=@(stepLanguageCode)
V_stepReferenceLanguageCountryCode=
V_stepReferenceLanguageVariant=



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Recognising individual elements
#! ===============================
#!
#! You need to define how the various other elements of a reference are
#! recognised.  For instance, normally verses will be numeric (at least
#! in those texts with which I am familiar).  On the other hand, in some
#! texts, chapter identifiers need not necessarily be purely numeric --
#! in English texts of the Vulgate, for example, some chapters are designated
#! by upper case letters.  If the processing is to read references correctly,
#! it needs to know how they are represented.
#!
#! In this section, we define how things look when we're parsing something
#! we have reason a priori to believe is a reference (or reference range
#! or reference collection).  The reason for spelling this out will become
#! apparent in the next section.
#!
#! In other words, if we know we're looking at a reference (or range or
#! collection), how would we recognise the book name; the chapter; the
#! verse; and subverses (if this text supports them).
#!
#! And we supply this information essentially via regular expressions
#! in somewhat limited form, which we gave as the values for
#! V_stepReferenceElementInputPattern_x, where x may be b, c, v or s.
#!
#!
#!
#! Books
#! -----
#!
#! USX recognises three different forms of book name -- abbreviated
#! (Mat); short (Matthew); and long (The Gospel according to St Matthew).
#!
#! Sometimes (but not always), the metadata supplied with a text has more than
#! one of these forms available, in which case I need to know which to look
#! for when parsing input, and which to use when generating output.
#!
#! The default is that I look only for the abbreviated form.  You can override
#! this as below :-
#!
#!   V_stepReferenceElementInputPattern_b=abbreviated|short|long  (one or more options, separated by '|')
#!
#! (Using more than one form is going to slow processing, though, so it is best
#! not done unless strictly necessary.)
#!
#! Note, incidentally, that if you specify a particular length of names and the
#! metadata does not make that form available, the processing will do its best
#! to select a suitable alternative from those available to it.  This is
#! unlikely to be successful on input -- if you are trying to parse texts which
#! contain the short Bible names, for instance, you're not going to succeed if
#! the metadata does not make short Bible names available.
#!
#!
#!
#! Verses and subverses
#! --------------------
#!
#! Leave the subverse definition blank if you do not need to cater for
#! subverses (but don't delete it altogether).  Otherwise, these each require
#! a very specific form of regular expression:
#!
#! You can have [0-9] followed optionally by the modifier '+' to indicate
#! one or more repetitions.  (Incidentally, I realise that not all languages
#! use the characters '0' to '9' to represent numbers.  That doesn't matter
#! -- give 0-9 here and the processing will convert this as necessary.)
#!
#! Or you can have something like [a-z] or [A-Z] (or the equivalent in the
#! vernacular you are dealing with), again optionally followed by '+'.
#! This specifies a range of characters which may be used instead of numbers.
#! For example, in English Bibles, subverses are very often marked with the
#! letters a-z (followed by aa, ab, etc if there are more than 26 subverses),
#! and the pattern [a-z]+ matches this.  You must specify only a _single_
#! range (so something like [a-zA-Z] is no good), and it must _be_ a range
#! (so \w+ is no good), and nor is [a$@#].  But the range doesn't have to
#! cover 26 items like the letters -- it can be any number.
#!
#! Or you can have both the number AND the letter versions, separated by
#! a vertical bar for 'or' -- eg [0-9]+|[a-z]+ .
#!
#! Note that the only modifier you are allowed is '+'.  In patterns elsewhere
#! I am more accommodating, but here it doesn't make sense to suggest that, say,
#! a verse can be recognised by _zero_ or more numbers.
#!
#! Regular expression matching is case-insensitive by default, so you need to
#! include (?-i) to force things to be case-sensitive where necessary.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

V_stepReferenceElementInputPattern_b=abbreviated

V_stepReferenceElementInputPattern_c=Ͼ[0-9]+|(?-i)[A-Z]Ͽ #! The A-Z caters for certain verse 'numbering' in the Vulgate text.  The Vulgate never goes beyond Z (and indeed, not that far, but I haven't discovered what it _does_ use).
V_stepReferenceElementInputPattern_v=Ͼ[0-9]+Ͽ
V_stepReferenceElementInputPattern_s=Ͼ(?-i)[a-z]+Ͽ



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Single references -- Input
#! ==========================
#!
#! In this section, we are concerned with the relationship between the
#! elements which make up a reference, and any separators which are used.
#! So we need to know, for instance, that a reference may consist of
#! a book, and chapter and a verse, and that if it does, they will appear
#! in that order, and will have particular separators between them.
#!
#! The way you indicate the arrangement of things is in terms of the
#! specific reference which in an English Bible might be shown as Jn 3:16a.
#! Thus if in the vernacular you are defining, the order happens to be subverse
#! followed by verse followed by chapter followed by book, with full stops as
#! separators between the subverse and verse, and the verse and chapter, and a
#! space between chapter and book, you'd give :-
#!
#!   a.16.3 Jn
#!
#! Just to emphasise the point, your definitions (ie the right-hand sides of
#! the various assignments below) should make use of _exactly_ the terms 'Jn',
#! '3', 16' and 'a' -- you shouldn't replace Jn with the abbreviation used in
#! the vernacular you are dealing with, and you shouldn't replace the numbers
#! by the numeric characters from that vernacular.  All I am trying to find
#! out here is the order in which the elements appear, and the separators.
#!
#! Anything other than Jn, 3, 16 and 'a' is assumed to be a separator,
#! with the implication that when parsing it must appear explicitly in the input
#! in the form which you specify and at the position you specify in order for
#! the reference to be recognised.  The only exception is spaces -- if you
#! include a space, the processing will accept one or more consecutive
#! whitespace characters. (And as explained above, you can also use regular
#! expressions, embedded within ear characters, if there happen to be
#! alternative separators -- or I _think_ you can -- I've never had cause to
#! try it.)
#!
#! You will observe that I have split the definitions below into three groups.
#! When parsing arbitrary strings, I make the assumption that if I encounter
#! any of the combined entries -- bcvs down to vs -- this should definitely
#! be interpreted as a reference.
#!
#! Single entries, however, are a different matter, both because of
#! potential ambiguities (is a '1' in the middle of a larger text string
#! a chapter or a verse?), and also because we may not wish to recognise
#! them at all -- an embedded '1' may actually just be a 1.
#!
#! To cater for this there are several separate sets of definitions.  Again,
#! each ends with b / c / v / s, but two sets have 'Singleton' in their name.
#!
#! The ones _without_ 'Singleton' are used when I already know that I'm
#! parsing a reference -- for example, when parsing Jn 3:16-17, and I've
#! already recognised the Jn 3:16 and the dash, and therefore believe
#! that I may well be dealing with a range and want to interpret the 17
#! in that context.  These will typically simply
#! be Jn, 3, 16 and a respectively, although you can omit the definition
#! for 'b' if you don't want to recognise book names as actually being
#! references, and you can omit 's' if you are confident you will not
#! need to deal with subverses.  (When I say 'omit', I recommend you do
#! actually give a definition here so as to show you haven't forgotten,
#! but leave the right-hand side blank.)
#!
#! The definitions _with_ 'Singleton' are concerned with recognising standalone
#! elements when not keeping company with other parts of a reference.  For
#! example, should a 3 on its own in the middle of a string be recognised at
#! all, and if so, can you determine ahead of time what it represents?
#!
#! These definitions are split into two.  The ones called 'Adorned' enable
#! you to give some additional regular expression(s), such that in company
#! with something which matches these expressions, an item will definitely
#! be recognised as a b or c or v or s.
#!
#! The anatomy of the following expressions is something like:
#!
#!    Ͼ...ϿBASEϾ...Ͽ
#!
#! where the ear tags as usual mark regular expressions, and BASE says
#! that you want the fundamental element to be recognised at this point.
#!
#! This is probably best described by example:
#!
#!   V_stepReferenceInputFormatSingletonAdorned_b=Ͼ(chapters?|chs?\.?)ϿBASE
#!
#! Here we have just the first of the two regular expressions.  This says we
#! are happy to recognise as definitely being a chapter reference anything
#! which matches the base pattern (ie in this case the pattern for a chapter
#! designator if it is preceded by 'chapter' or 'chapters' or 'ch' or 'ch.' or
#! 'chs' or chs.'.  With that prefix it will be recognised as definitely being
#! a chapter; without it, it will not be recognised at all.
#!
#! Alternatively, you can give a regular expression _after_ the word BASE, in
#! which case something will be recognised as a chapter only if it matches
#! the pattern for chapters, and is followed by something matching that
#! expression.  Or you can have regular expressions before and after.
#!
#! Note that by default, the pattern is take as case-insensitive; you'll need to
#! ad (?-i) if you want to force it to be case-sensitive.
#!
#! All of these 'Adorned' definitions are optional.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

V_stepReferenceInputFormat_bcvs=Jn 3:16a
V_stepReferenceInputFormat_bcv =Jn 3:16
V_stepReferenceInputFormat_bc  =Jn 3
V_stepReferenceInputFormat_cvs =3:16a
V_stepReferenceInputFormat_cv  =3:16
V_stepReferenceInputFormat_vs  =16a

V_stepReferenceInputFormat_b   =      #! I don't contemplate ever having a book name standalone within, say, a range ...
V_stepReferenceInputFormat_c   =3     #! ... but I _would_ allow Mat 1-2, so I need a definition which lets me recognise a chapter.
V_stepReferenceInputFormat_v   =16    #! ... and Mat 1:2-3, so I need a definition for a verse ...
V_stepReferenceInputFormat_s   =a     #! ... and _perhaps_ Mat 1:2a-b, so I need a definition for a subverse.

V_stepReferenceInputFormatSingletonAdorned_b =                                 #! I _really_ don't ever want a standalone book.
V_stepReferenceInputFormatSingletonAdorned_c =Ͼ(?i)(chapters?|chs?\.?)ϿBASE    #! If I come across a standalone number preceded by 'chapter' etc, I know for sure it's a chapter.
V_stepReferenceInputFormatSingletonAdorned_v =Ͼ(?i)(verses?|vv?\.?)ϿBASE       #! Ditto, mutatis mutandis, for verses.
V_stepReferenceInputFormatSingletonAdorned_s =                                 #! But there's no standard way I can think of for disambiguating subverses.






#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Reference ranges -- Input
#! =========================
#!
#! Typically a reference range looks something like Jn 3:16-17.
#!
#! If you do not wish to support ranges, simply set definitions discussed here
#! to have an empty right-hand side.
#!
#! Very often a text uses different separators (ie in place of the
#! dash in the example above), depending upon whether the range
#! crosses a chapter boundary.  Equally, the text may have _intended_
#! to do that, but may have been inconsistent (and indeed some texts
#! which I have seen have used quite a collection of different
#! separators in different places).
#!
#! Use V_stepReferenceRangeInputSeparators to define the separators you expect
#! to see.  I recommend making this as lenient as possible, at least if there
#! is any vague chance that different separators have been used in different
#! places.
#!
#! If the separator is a dash, for instance, you may want to consider
#! using :-
#!
#!  V_stepReferenceRangeInputSeparators=Ͼ(\s*\-\s*)|(\s*\–\s*)|(\s*\—\s*)|(\s*‒\s*)Ͽ
#!
#! which, although it may not be entirely obvious, caters for quite a
#! range of dashes -- a hyphen, an em-dash, an en-dash, and one other
#! flavour sufficiently obscure that I can't now recall what it is,
#! optionally preceded or followed by spaces, and means that even
#! if the translators have used the 'wrong' separator, we'll forgive
#! them.  (Nothing anywhere in the processing relies upon them
#! having used the 'right' one -- I don't rely upon them getting it right
#! in order to tell the difference between within-chapter ranges and
#! cross-chapter ranges, because I don't need to know the difference.)
#!
#! Moving on, you need to specify where the separator appears in relation
#! to the two references.  To this end, you use a pattern based upon 'Ref1',
#! 'Ref2' and an ordinary hyphen.  Assuming it goes between them (and it is
#! difficult to imagine it does not), you would use:
#!
#!    V_stepReferenceRangeInputFormat=Ref1-Ref2
#!
#! (The hyphen you use here to represent the separator will be replaced by the
#! by the actual separators defined by V_stepReferenceRangeInputSeparators
#! during the processing.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

V_stepReferenceRangeInputSeparators=Ͼ\s*[-–—‒]\s*Ͽ
V_stepReferenceRangeInputFormat=Ref1-Ref2



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Reference collections -- Input
#! ==============================
#!
#! Typically a reference collection looks something like Jn 3:16; 17; 4:2.
#!
#! If you do not wish to support collections, simply set the definitions
#! discussed here to have an empty right-hand side.
#!
#! Separators are handled in much the same way as for range separators, and all
#! the same considerations apply.
#!
#! Collections can be of any length; the format you give below describes
#! the first two elements, of a collection, but this is then repeated for the
#! others (ie more separators and more references).
#!
#! Always give the separator as a comma in V_stepReferenceCollectionInputFormat.
#! The processing will replace it by the definition given in
#! V_stepReferenceCollectionInputFormat.
#!
#! I haven't really thought too much about what flexibility you might want
#! here, beyond the ability to specify the separators.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

V_stepReferenceCollectionInputSeparators=Ͼ\s*[,;]\s*Ͽ
V_stepReferenceCollectionInputFormat=Ref1,Ref2





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Single references -- Output
#! ===========================
#!
#! You need to define the output formats.  This works the same way as for input
#! formats.
#!
#! This gives the system enough information to be able to write out all of the
#! various forms of output.  Which of these is used in a particular instance
#! depends upon whether the processing has supplied an overriding context
#! definition and / or context information.
#!
#! In a particular instance the system will use abbreviated book names on output
#! by default.  You can change its default using:
#!
#!   V_stepReferenceElementOutputDefault_b=abbreviated|short|long  (this time a _single_ option)
#!
#! where (unlike with the input counterpart), you specify precisely _one_ of the
#! options.
#!
#! You can still override this on a case-by-case -- forcing a particular call to
#! the writing methods to use whatever length you require.
#!
#! You can use double-quote marks as ditto indicators below, to pick up the
#! input settings and use those.  In fact I've opted not to do so below,
#! because I think it makes things clearer.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

V_stepReferenceElementOutputDefault_b=abbreviated
V_stepReferenceOutputFormat_bcvs=Jn 3:16a
V_stepReferenceOutputFormat_bcv =Jn 3:16
V_stepReferenceOutputFormat_bc  =Jn 3
V_stepReferenceOutputFormat_cvs =3:16a
V_stepReferenceOutputFormat_cv  =3:16
V_stepReferenceOutputFormat_vs  =16a

V_stepReferenceOutputFormat_b   =Jn
V_stepReferenceOutputFormat_c   =3
V_stepReferenceOutputFormat_v   =16
V_stepReferenceOutputFormat_s   =a



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Reference ranges -- Output
#! ==========================
#!
#! Here you specify what ranges look like on output.
#!
#! V_stepReferenceOutputRangeSeparatorSameChapter and
#! V_stepReferenceOutputRangeSeparatorDifferentChapters do what it says on the
#! tin.
#!
#! V_stepReferenceRangeOutputFormat will typically be Ref1/Ref2.  This
#! specifies the ordering (you want the low ref to come out before the
#! high one, which I imagine will always be the case, but may not always be.
#!
#! It also gives you the chance to constrain the formatting of the two
#! references.  The default, as shown above, is bcvs, which basically
#! lets the processing output any bits of the reference which are available,
#! but to suppress parts which could be deduced from context.  But you
#! can give either or both of them a specific format -- eg Bcvs -- which
#! can force the way things are output (and may be useful, for instance, with
#! things like USX, which stipulate that the elements in reference ranges be
#! output in full.
#!
#! A detailed discussion of the format strings appears in
#! vernacularTextTranslations_eng.conf.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

V_stepReferenceOutputRangeSeparatorSameChapter=-
V_stepReferenceOutputRangeSeparatorDifferentChapters=-
V_stepReferenceRangeOutputFormat=Ref1/Ref2



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Reference collections -- Output
#! ===============================
#!
#! Here you specify how output collections are formatted.  More specifically,
#! you need to specify the separators to be used between consecutive elements
#! of the collection when a) the two elements are in the same chapter, and b)
#! they are in different chapters.
#!
#! You specify just two elements (using V_stepReferenceOutputCollectionFormat),
#! and in that definition you should always show them separated by a slash.
#! The processing will sort out the correct separator for you.
#!
#! If the collection consists of more than one item, succeeding ones will
#! follow the Ref2 format, and again will be preceded by the correct separator.
#!
#! Ref1 and Ref2 can be specified in the same way as for reference ranges, qv.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

V_stepReferenceOutputCollectionSeparatorSameChapter=,{space}
V_stepReferenceOutputCollectionSeparatorDifferentChapters=;{space}
V_stepReferenceOutputCollectionFormat=Ref1/Ref2
