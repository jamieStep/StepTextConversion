#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! We often pick up a number of texts from the same source, and in such cases
#! the accompanying metadata will often contain information we need for our
#! own purposes, and may be in a standard form, such that it is worth putting
#! a little effort into describing how to obtain that data from these files
#! directly, rather than have to transcribe manually it into our own format.
#!
#! This is the case for the Digital Bible Library (DBL), which supplies
#! metadata in a standard XML format. I have XPath-based processing which will
#! pick up selected information from XML files, and this present configuration
#! file says what XPath should be used to supply data for each of a number
#! of STEP configuration parameters.
#!
#! In fact, hopefully you are unlikely to need to create a per-text analogue
#! of this file, but if you do, the comments below should help you understand
#! what you need to do.  And if we ever produce code to support the metadata
#! files produced by some other text supplier, it will give some idea of
#! what kind of file, equivalent to the present one, you might need in order
#! to support it.
#!
#! There are detailed descriptions of the various parameters below, but some
#! initial comments may be in order.
#!
#! If you need these details you need to include them explicitly within
#! your step.conf file:
#!
#!    $includeFile $jarResources/commonForSourceDbl.conf
#!
#!
#! We are concerned basically with two things here -- telling the processing
#! where it can locate the XML file which contains the data we need; and
#! telling it how the data in that file relates to the STEP configuration
#! parameters which we are seeking to set up.
#!
#! As regards the location of the data, this file provides a default, but
#! you can override this with a location of your own if you prefer: it's
#! just a standard definition statement of the form a=b, and the way in which
#! one setting overrides another is discussed in commonForTargetSword.conf.
#!
#! And as regards the way data in the external file relates to the STEP
#! configuration parameters we are trying to set up, each STEP
#! configuration parameter appears in something which looks at least
#! vaguely like a standard a=b definition statement.  The only difference
#! is the specialist syntax on the right hand side.  For example,
#!
#!  stepBibleNameEnglish=@getExternal(metadata, DBLMetadata/DBLMetadata/identification/name)
#!
#! In fact, not only do they look like a standard definition -- they work
#! pretty much like one too.  A later definition for stepBibleNameEnglish
#! will override this one; and if not overridden, this one is used to
#! supply the value for stepBibleNameEnglish when you request it.  And
#! as usual, the right hand side of the definition will be subject to
#! @(...) substitutions before it is used.  The only difference is that the
#! we then use this modified right-hand side to extract information from the
#! external configuration file; and that data is itself then also subject to
#! @(...) substitutions.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! This tells the configuration processor that it may be asked to take data from
#! an external source, and identifies the source.  You don't _have_ to use this
#! feature even if external metadata is available; and even if it is, you don't
#! have to mimic the arrangement below.
#!
#! A directive like
#!
#!    stepExternalDataSource=dbl:metadata:$metadata/metadata.xml
#!
#! associates the name 'metadata' with a given external file (with the usual
#! conventions as regards path names), and records the fact that this is a DBL
#! file.  The logical name 'metadata' can now be used in $getExternal statements
#! to identify that source:
#!
#!    stepBibleNameEnglish=@getExternal(metadata, DBLMetadata/identification/name)
#!                                      ^^^^^^^^
#!
#! There is a also a corresponding stepExternalDataSourceIfExists definition.
#! stepExternalDataSource abandons processing if the file it identifies does not
#! exist.  stepExternalDataSourceIfExists does not.  If you use
#! stepExternalDataSourceIfExists and the file _doesn't_ exist, then @getExternal
#! definitions involving that particular source
#!
#! In general you can have as many stepExternalDataSource statements as you
#! want, although for DBL it probably makes sense to have at most two --
#! one for the general metadata and one for the licensing information.
#!
#! In the section below, I give default definitions for these two, on the
#! assumption that you will place the metadata.xml and license.xml files
#! supplied by DBL into the Metadata folder of the text upon which you are
#! working.
#!
#! Nothing is done with the definition until it is actually needed; and
#! this happens the first time a definition based upon @getExternal
#! is encountered.  At that point, @(...) substitutions are performed
#! upon the file name, and then that file becomes used in future for all
#! @getExternal statements involving dbl.
#!
#! Because the stepExternal... details are stored in this way, they are
#! treated in the same way as any other definition (and may therefore
#! be overridden by later definitions).
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepExternalDataSource=dbl:metadata:$metadata/metadata.xml
stepExternalDataSourceIfExists=dbl:licence:$metadata/license.xml



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! From here on, I list the configuration parameters whose values I wish to
#! fill in (each of them on the left of the equals sign), and details of
#! where to obtain them from on the right.
#!
#! The details on the right are subject to the normal overrides and @(...)
#! substitutions.  Once these have been applied, the result is used to obtain
#! data from the external file, and this data is itself then also subject to
#! @(...) substitutions.
#!
#! The fullest form of the right hand side is:
#!
#!    @getExternal(metadata, DBLMetadata/language/scriptDirection).toTextDirection()
#!
#! The first argument within the parentheses must be 'dbl'.  The second
#! gives an XPath indicating where to obtain the data.  And you may append one of
#! a small repertoire of routine names, like .toTextDirection() above, to convert
#! the data to another form.  The definitions below use all of the processing routines
#! currently available, and hopefully it is reasonably apparent what they all do.
#!
#! My apologies for the 'ear' markup ... -- I needed something to serve
#! as delimiters which I was unlikely to encounter with 'real' text.
#! Short of copying and pasting them, I'm not sure how you actually type
#! them.
#!
#! As we saw above, files are associated with names via stepExternalDataSource
#! definitions, and these are not actioned until the first time a @getExternal
#! statement involving a given file name is encountered.  If the association
#! was established using stepExternalDataSourceIfExists and the file does not
#! exist, @getExternal statements involving that name are silently ignored.
#! If no stepExternalDataSource or stepExternalDataSourceIfExists has been
#! encountered by the time a @getExternal statement using that name is
#! encountered, processing is abandoned.
#!
#! I have split the data below into separate blocks, with the items in each
#! block all having something reasonably in common, but there is no particular
#! need to do this.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Details of the Bible text.
#!
#! I'm not too sure about stepBibleId.  I need something to identify the text,
#! and I need it to be something I can find relatively easily by reference to
#! the metadata, so that if needs be, later on we can look at the id I have
#! included in the Sword config file and relate it back to a particular text
#! within DBL.
#!
#! It is not entirely clear, for starters, whether this id should be one
#! assigned by DBL or one assigned by the organisation which has supplied the
#! text to DBL.  I have opted here for the former because it looks as though
#! there is a reliable candidate for the role -- there seems to be no
#! consistent way of identifying a supplier-assigned id.  Whether the thing I
#! have selected is actually guaranteed to be unique I'm not sure, but it looks
#! reasonably likely that it is.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepTextIdSuppliedBySourceRepositoryOrOwnerOrganisation=DBL:@getExternal(metadata, DBLMetadata/@id)
stepTextVersionSuppliedBySourceRepositoryOrOwnerOrganisation=DBL:@getExternal(metadata, DBLMetadata/@revision)
stepSupplierUpdateReason=@getExternal(metadata, DBLMetadata/archiveStatus/comments, ="No comment supplied")

stepBibleNameEnglish=@getExternal(metadata, DBLMetadata/identification/name)
stepBibleNameVernacular=@choose(@getExternal(metadata, DBLMetadata/identification/nameLocal, DBLMetadata/publications/publication/nameLocal, DBLMetadata/identification/name), @(stepBibleNameEnglish))


stepAbbreviationEnglish=@getExternal(metadata, DBLMetadata/identification/abbreviation)
stepAbbreviationVernacular=@choose(@getExternal(metadata, DBLMetadata/identification/abbreviation, DBLMetadata/publications/publication/abbreviationLocal), @(stepAbbreviationEnglish))



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Details of the language.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepLanguageCodeAsSupplied=@getExternal(metadata, DBLMetadata/language/iso)
stepSuppliedScriptCode=@getExternal(metadata, DBLMetadata/language/scriptCode)
stepSuppliedCountryCode=@getExternal(metadata, DBLMetadata/countries/country/iso)
stepSuppliedLanguageNameEnglish=@getExternal(metadata, DBLMetadata/language/name)
stepSuppliedLanguageNameVernacular=@getExternal(metadata, DBLMetadata/language/nameLocal)
stepTextDirection=@choose(@getExternal(metadata, DBLMetadata/language/scriptDirection).toTextDirection(), =LtoR)



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Version information.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepTextModifiedDate=@getExternal(metadata, DBLMetadata/archiveStatus/dateUpdated, DBL/archiveStatus/dateArchived, DBLMetadata/identification/dateCompleted).toDate()



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Licensing, organisation and copyright information.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepTextRepositoryOrganisationAbbreviatedName=DBL #! Force DBL here.
stepTextRepositoryOrganisationFullName=Digital Bible Library
stepTextRepositoryOrganisationWebsiteLinkOrDescription=<a href='@(stepExternalDataPath_DblWebsite)'>@(stepTextRepositoryOrganisationFullName)</a>
stepShortPromo=@getExternal(metadata, DBLMetadata/promotion/promoVersionInfo)



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Used in conjunction with DBL-internal text ids with a view to generating
#! something I hope will be globally unique.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepDisambiguatorForId=DBL





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!
#! Licensing information.
#!
#! At this point I have little experience of what might be useful, and also to
#! what extent the information here is specific to DBL or to what extent it
#! might be generally available.  Presently, therefore, some of the stuff
#! below -- the 'CanAdd' stuff in particular -- is very speculative: if DBL is
#! the only source from which it can be obtained, there may not be much point in
#! accumulating it here.
#!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepLicenceId=DBL:@getExternal(licence, license/@id, =Unknown)
stepLicenceExpiryDate=@getExternal(licence, license/dateLicenseExpiry, =3000-01-01)
stepLicenceCanAddIntroductions=@getExternal(licence, license/publicationRights/allowIntroductions, =No)
stepLicenceCanAddFootnotes=@getExternal(licence, license/publicationRights/allowFootnotes, =No)
stepLicenceCanAddCrossReferences=@getExternal(licence, license/publicationRights/allowCrossReferences, =No)
stepLicenceCanAddCrossReferences=@getExternal(licence, license/publicationRights/allowExtendedNotes, =No)





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#! Always have this after the vernacular-specific details.  Include book
#! information after the INCLUDE if you have any.
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

stepBookList=@getExternal(metadata, DBLMetadata/names/*).getBookList()


